name: Bit.Hub Humor-Reasoning Orchestrator

on:
  push:
    branches: [ "main", "develop" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:
    inputs:
      default_threshold:
        description: "standard | strict | paranoid"
        type: choice
        default: "standard"
        options: [ "standard", "strict", "paranoid" ]

permissions:
  contents: write
  pull-requests: write

concurrency:
  group: bithub-humor-orchestrator-${{ github.ref }}
  cancel-in-progress: false

env:
  BIT_HUB_REPO_URL: "https://github.com/Doctor0Evil/Bit.Hub.git"
  REPORT_DIR: ".bithub/reports"
  POWER_THRESHOLD: ${{ inputs.default_threshold || vars.POWER_THRESHOLD || 'standard' }}

jobs:
  reason_and_dispatch:
    name: Compute plan and dispatch downstream workflows
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Sync canonical Bit.Hub policies (non-blocking)
        run: |
          set +e
          if git ls-remote "$BIT_HUB_REPO_URL" &>/dev/null; then
            git clone --depth=1 "$BIT_HUB_REPO_URL" /tmp/bithub
            rsync -av --ignore-existing /tmp/bithub/.bithub/policy/ .bithub/policy/ || true
            rsync -av --ignore-existing /tmp/bithub/.bit/schemas/ .bit/schemas/ || true
          else
            echo "::warning::Canonical repo unreachable — using local copies."
          fi
          set -e

      - name: Run Humor-Reasoning-Model
        id: hrm
        uses: ./.github/actions/humor-reasoning-model
        with:
          default_threshold: ${{ env.POWER_THRESHOLD }}

      - name: Show plan
        run: |
          echo "Resolved threshold: ${{ steps.hrm.outputs.threshold }}"
          echo "Plan:"
          cat "${{ steps.hrm.outputs.plan_path }}" || true

      - name: Install GitHub CLI
        run: |
          if ! command -v gh >/dev/null 2>&1; then
            sudo apt-get update -y && sudo apt-get install -y gh
          fi
          gh --version

      # Pipeline Supremacy
      - name: Dispatch Pipeline Supremacy (CI)
        if: ${{ steps.hrm.outputs.run_pipeline == 'true' }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh workflow run "Bit.Hub Pipeline Supremacy (CI)" \
            -f power_threshold=${{ steps.hrm.outputs.threshold }} || echo "::notice::Queued Pipeline Supremacy"

      # Policy + Scorecard Gate
      - name: Dispatch Policy + Scorecard Gate
        if: ${{ steps.hrm.outputs.run_policy_gate == 'true' }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh workflow run "Bit.Hub Policy + Scorecard Gate" \
            -f power_threshold=${{ steps.hrm.outputs.threshold }} || echo "::notice::Queued Policy Gate"

      # Meta Corrector v3
      - name: Dispatch Meta Corrector v3
        if: ${{ steps.hrm.outputs.run_meta_corrector == 'true' }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh workflow run "Bit.Hub Meta Corrector v3 (Supremacy Alignment)" \
            -f auto_fix=true \
            -f power_threshold=${{ steps.hrm.outputs.threshold }} \
            -f target_ref=${{ github.ref_name }} || echo "::notice::Queued Meta Corrector"

      # Container Compliance Wall and Publish
      - name: Dispatch Container Compliance Wall
        if: ${{ steps.hrm.outputs.run_container_wall == 'true' }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh workflow run "Bit.Hub Container Compliance Wall and Publish — Full Compliance" \
            -f image_name=${{ github.event.repository.name || 'service' }} \
            -f image_tag=latest \
            -f power_threshold=${{ steps.hrm.outputs.threshold }} || echo "::notice::Queued Container Wall"

      # Release LMFAO Drop on signal
      - name: Dispatch Release LMFAO Drop
        if: ${{ steps.hrm.outputs.run_release_lmfao == 'true' }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh workflow run "Release LMFAO Drop" || echo "::notice::Queued LMFAO Release"

      - name: Emit orchestrator event
        run: |
          mkdir -p .bithub/events
          cat > ".bithub/events/humor-orchestrator-${{ github.run_id }}.json" <<JSON
          {
            "event": "humor_orchestrator_plan",
            "by": "${{ github.actor }}",
            "repo": "${{ github.repository }}",
            "run_id": "${{ github.run_id }}",
            "threshold": "${{ steps.hrm.outputs.threshold }}",
            "timestamp": "$(date -u +'%Y-%m-%dT%H:%M:%SZ')",
            "plan_file": "${{ steps.hrm.outputs.plan_path }}"
          }
          JSON
          echo "::notice::Orchestrator event logged"

      - name: Always succeed
        run: echo "Humor-Reasoning orchestrator completed (never fails)."

                    - name: Setup Java JDK
  uses: actions/setup-java@v5.0.0
  with:
    # The Java version to set up. Takes a whole or semver Java version. See examples of supported syntax in README file
    java-version: # optional
    # The path to the `.java-version` file. See examples of supported syntax in README file
    java-version-file: # optional
    # Java distribution. See the list of supported distributions in README file
    distribution: 
    # The package type (jdk, jre, jdk+fx, jre+fx)
    java-package: # optional, default is jdk
    # The architecture of the package (defaults to the action runner's architecture)
    architecture: # optional
    # Path to where the compressed JDK is located
    jdkFile: # optional
    # Set this option if you want the action to check for the latest available version that satisfies the version spec
    check-latest: # optional
    # ID of the distributionManagement repository in the pom.xml file. Default is `github`
    server-id: # optional, default is github
    # Environment variable name for the username for authentication to the Apache Maven repository. Default is $GITHUB_ACTOR
    server-username: # optional, default is GITHUB_ACTOR
    # Environment variable name for password or token for authentication to the Apache Maven repository. Default is $GITHUB_TOKEN
    server-password: # optional, default is GITHUB_TOKEN
    # Path to where the settings.xml file will be written. Default is ~/.m2.
    settings-path: # optional
    # Overwrite the settings.xml file if it exists. Default is "true".
    overwrite-settings: # optional, default is true
    # GPG private key to import. Default is empty string.
    gpg-private-key: # optional
    # Environment variable name for the GPG private key passphrase. Default is $GPG_PASSPHRASE.
    gpg-passphrase: # optional
    # Name of the build platform to cache dependencies. It can be "maven", "gradle" or "sbt".
    cache: # optional
    # The path to a dependency file: pom.xml, build.gradle, build.sbt, etc. This option can be used with the `cache` option. If this option is omitted, the action searches for the dependency file in the entire repository. This option supports wildcards and a list of file names for caching multiple dependencies.
    cache-dependency-path: # optional
    # Workaround to pass job status to post job step. This variable is not intended for manual setting
    job-status: # optional, default is ${{ job.status }}
    # The token used to authenticate when fetching version manifests hosted on github.com, such as for the Microsoft Build of OpenJDK. When running this action on github.com, the default value is sufficient. When running on GHES, you can pass a personal access token for github.com if you are experiencing rate limiting.
    token: # optional, default is ${{ github.server_url == 'https://github.com' && github.token || '' }}
    # Name of Maven Toolchain ID if the default name of "${distribution}_${java-version}" is not wanted. See examples of supported syntax in Advanced Usage file
    mvn-toolchain-id: # optional
    # Name of Maven Toolchain Vendor if the default name of "${distribution}" is not wanted. See examples of supported syntax in Advanced Usage file
    mvn-toolchain-vendor: # optional
          
