name: Great.Wall.of.Compliance

on:
  push:
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

env:
  REPORTS_DIR: .bithubreports
  QUARANTINE_DIR: .bithubreports/quarantine
  DISALLOWED_FILE: .bit/disallowed_terms.txt
  CHARTER_FILE: .bitcharter
  PERSONA_LOCK: .bit/persona.lock
  PERSONA_REGISTRY: .bit/persona_registry.json
  ASSET_ECONOMY: .bit/asset_economy.json
  CONTENT_POLICY: .bit/content_policy.json

jobs:
  compliance-linux:
    name: "üåê Linux Compliance ÈïøÂüé"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq coreutils

      - name: Display Great Wall Banner
        run: echo "üß± ÊûÑÂª∫ÂêàËßÑÈïøÂüé: BUILDING THE GREAT WALL OF COMPLIANCE üß±"

      - name: Verify Charter Exists and Terms
        run: |
          test -f "$CHARTER_FILE" || { echo "‚ùå Missing $CHARTER_FILE"; exit 1; }
          # Confirm independence clause is present (customize as needed)
          grep -qiE "independent\s*&\s*free" "$CHARTER_FILE" || {
            echo "‚ùå Required independence clause not found in $CHARTER_FILE"; exit 1;
          }
          echo "‚úÖ Charter present and terms detected."

      - name: Ensure required policy files exist
        run: |
          for f in "$DISALLOWED_FILE" "$PERSONA_LOCK" "$PERSONA_REGISTRY" "$ASSET_ECONOMY" "$CONTENT_POLICY"; do
            test -f "$f" || { echo "‚ùå Missing policy file: $f"; exit 1; }
          done
          echo "‚úÖ All policy files present."

      - name: Scan for disallowed terms (masked output)
        id: scan_disallowed
        shell: bash
        run: |
          mkdir -p "$REPORTS_DIR" "$QUARANTINE_DIR"
          # Find matches but do not print raw content to logs
          if grep -R -n -I -i -f "$DISALLOWED_FILE" . > "$REPORTS_DIR/raw_hits_linux.txt" 2>/dev/null; then
            # Build masked summary (replace letters with *)
            awk -F: '{print $1":"$2":<masked_line>"}' "$REPORTS_DIR/raw_hits_linux.txt" \
              > "$REPORTS_DIR/disallowed_summary.txt"
            # List unique offending file paths (masked only; do not upload file contents)
            cut -d: -f1 "$REPORTS_DIR/raw_hits_linux.txt" | sort -u > "$REPORTS_DIR/offending_files.txt"
            echo "found=true" >> "$GITHUB_OUTPUT"
            echo "‚ö†Ô∏è Disallowed content detected. Masked summary written."
          else
            echo "found=false" >> "$GITHUB_OUTPUT"
            echo "‚úÖ No disallowed content found."
          fi

      - name: Fail if disallowed content detected
        if: steps.scan_disallowed.outputs.found == 'true'
        run: |
          echo "‚ùå Compliance stop: disallowed content found (see masked summary in artifacts)."
          exit 1

      - name: Verify persona registry lock
        run: |
          WANT=$(awk -F= '/^registry_sha256=/{print $2}' "$PERSONA_LOCK" | tr -d '\r')
          GOT=$(sha256sum "$PERSONA_REGISTRY" | awk '{print $1}')
          test -n "$WANT" || { echo "‚ùå registry_sha256 missing from $PERSONA_LOCK"; exit 1; }
          test "$WANT" = "$GOT" || { echo "‚ùå Persona registry hash mismatch"; exit 1; }
          echo "‚úÖ Persona registry lock verified."

      - name: Validate asset-economy configuration (portable, non-blockchain)
        run: |
          jq -e 'has("portable") and has("blockchain") and .portable == true and .blockchain == false' "$ASSET_ECONOMY" \
            >/dev/null || { echo "‚ùå Asset economy must be portable=true and blockchain=false"; exit 1; }
          jq -e 'has("trading") and .trading.enabled == true and .trading.requires_review == true' "$ASSET_ECONOMY" \
            >/dev/null || { echo "‚ùå Trading must be enabled and require manual review"; exit 1; }
          echo "‚úÖ Asset-economy config validated."

      - name: Validate mature content gating
        run: |
          jq -e 'has("mature_content") and .mature_content.allowed == true and .mature_content.review_required == true' "$CONTENT_POLICY" \
            >/dev/null || { echo "‚ùå Mature content policy not compliant"; exit 1; }
          echo "‚úÖ Mature content policy validated."

      - name: Ensure CI did not generate explicit runtime artifacts
        run: |
          if [ -d .bit/runtime ] && [ -n "$(ls -A .bit/runtime 2>/dev/null)" ]; then
            echo "‚ùå Explicit runtime artifacts must not be present in CI (.bit/runtime/*)"; exit 1;
          fi
          echo "‚úÖ No explicit runtime artifacts present."

      - name: Audit log
        run: |
          mkdir -p "$REPORTS_DIR"
          echo "$(date -u +%FT%TZ) Linux compliance passed for $GITHUB_SHA" >> "$REPORTS_DIR/compliance.log"

      - name: Upload masked reports
        uses: actions/upload-artifact@v4
        with:
          name: compliance-reports-linux
          path: |
            .bithubreports/compliance.log
            .bithubreports/disallowed_summary.txt
            .bithubreports/offending_files.txt
          if-no-files-found: warn
          retention-days: 7

  compliance-windows:
    name: "ü™ü Windows Compliance ÈïøÂüé"
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4

      - name: Display Great Wall Banner
        run: Write-Output "üß± ÊûÑÂª∫ÂêàËßÑÈïøÂüé: BUILDING THE GREAT WALL OF COMPLIANCE üß±"

      - name: Verify Charter Exists and Terms
        shell: pwsh
        run: |
          if (!(Test-Path $env:CHARTER_FILE)) { Write-Error "‚ùå Missing $env:CHARTER_FILE"; exit 1 }
          $charter = Get-Content -Raw $env:CHARTER_FILE
          if ($charter -notmatch 'independent\s*&\s*free') { Write-Error "‚ùå Independence clause not found"; exit 1 }
          Write-Output "‚úÖ Charter present and terms detected."

      - name: Ensure required policy files exist
        shell: pwsh
        run: |
          $files = @($env:DISALLOWED_FILE,$env:PERSONA_LOCK,$env:PERSONA_REGISTRY,$env:ASSET_ECONOMY,$env:CONTENT_POLICY)
          foreach ($f in $files) { if (!(Test-Path $f)) { Write-Error "‚ùå Missing policy file: $f"; exit 1 } }
          Write-Output "‚úÖ All policy files present."

      - name: Scan for disallowed terms (masked output)
        id: scan_disallowed_win
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Force -Path $env:REPORTS_DIR | Out-Null
          New-Item -ItemType Directory -Force -Path $env:QUARANTINE_DIR | Out-Null
          $patterns = Get-Content $env:DISALLOWED_FILE | Where-Object { $_ -ne "" }
          $hits = @()
          Get-ChildItem -Recurse -File | ForEach-Object {
            $file = $_.FullName
            try {
              $match = Select-String -Path $file -Pattern $patterns -AllMatches -SimpleMatch -CaseSensitive:$false -ErrorAction SilentlyContinue
              if ($match) { $hits += $match }
            } catch {}
          }
          if ($hits.Count -gt 0) {
            # Write masked summary: filename:line:<masked_line>
            $summary = $hits | ForEach-Object { "$($_.Path):$($_.LineNumber):<masked_line>" }
            $summary | Set-Content -Path "$env:REPORTS_DIR\disallowed_summary.txt"
            $hits.Path | Sort-Object -Unique | Set-Content -Path "$env:REPORTS_DIR\offending_files.txt"
            "found=true" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
            Write-Error "‚ùå Disallowed content detected. Masked summary written."
            exit 1
          } else {
            "found=false" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
            Write-Output "‚úÖ No disallowed content found."
          }

      - name: Audit log
        if: always()
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Force -Path $env:REPORTS_DIR | Out-Null
          Add-Content -Path "$env:REPORTS_DIR\compliance.log" -Value "$(Get-Date -AsUTC -Format o) Windows compliance finished (status=$env:__GITHUB_JOB_STATUS__)"

      - name: Upload masked reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: compliance-reports-windows
          path: |
            .bithubreports/compliance.log
            .bithubreports/disallowed_summary.txt
            .bithubreports/offending_files.txt
          if-no-files-found: warn
          retention-days: 7

  compliance-macos:
    name: "üçè macOS Compliance ÈïøÂüé"
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          brew update
          brew install jq

      - name: Display Great Wall Banner
        run: echo "üß± ÊûÑÂª∫ÂêàËßÑÈïøÂüé: BUILDING THE GREAT WALL OF COMPLIANCE üß±"

      - name: Verify Charter Exists and Terms
        run: |
          test -f "$CHARTER_FILE" || { echo "‚ùå Missing $CHARTER_FILE"; exit 1; }
          grep -qiE "independent\s*&\s*free" "$CHARTER_FILE" || {
            echo "‚ùå Required independence clause not found"; exit 1;
          }
          echo "‚úÖ Charter present and terms detected."

      - name: Ensure required policy files exist
        run: |
          for f in "$DISALLOWED_FILE" "$PERSONA_LOCK" "$PERSONA_REGISTRY" "$ASSET_ECONOMY" "$CONTENT_POLICY"; do
            test -f "$f" || { echo "‚ùå Missing policy file: $f"; exit 1; }
          done
          echo "‚úÖ All policy files present."

      - name: Scan for disallowed terms (masked output)
        id: scan_disallowed_macos
        shell: bash
        run: |
          mkdir -p "$REPORTS_DIR" "$QUARANTINE_DIR"
          if grep -R -n -I -i -f "$DISALLOWED_FILE" . > "$REPORTS_DIR/raw_hits_macos.txt" 2>/dev/null; then
            awk -F: '{print $1":"$2":<masked_line>"}' "$REPORTS_DIR/raw_hits_macos.txt" \
              > "$REPORTS_DIR/disallowed_summary.txt"
            cut -d: -f1 "$REPORTS_DIR/raw_hits_macos.txt" | sort -u > "$REPORTS_DIR/offending_files.txt"
            echo "found=true" >> "$GITHUB_OUTPUT"
            echo "‚ùå Disallowed content detected. Masked summary written."
            exit 1
          else
            echo "found=false" >> "$GITHUB_OUTPUT"
            echo "‚úÖ No disallowed content found."
          fi

      - name: Verify persona registry lock
        run: |
          WANT=$(awk -F= '/^registry_sha256=/{print $2}' "$PERSONA_LOCK" | tr -d '\r')
          GOT=$(shasum -a 256 "$PERSONA_REGISTRY" | awk '{print $1}')
          test -n "$WANT" || { echo "‚ùå registry_sha256 missing from $PERSONA_LOCK"; exit 1; }
          test "$WANT" = "$GOT" || { echo "‚ùå Persona registry hash mismatch"; exit 1; }
          echo "‚úÖ Persona registry lock verified."

      - name: Validate asset-economy configuration (portable, non-blockchain)
        run: |
          jq -e 'has("portable") and has("blockchain") and .portable == true and .blockchain == false' "$ASSET_ECONOMY" \
            >/dev/null || { echo "‚ùå Asset economy must be portable=true and blockchain=false"; exit 1; }
          jq -e 'has("trading") and .trading.enabled == true and .trading.requires_review == true' "$ASSET_ECONOMY" \
            >/dev/null || { echo "‚ùå Trading must be enabled and require manual review"; exit 1; }
          echo "‚úÖ Asset-economy config validated."

      - name: Validate mature content gating
        run: |
          jq -e 'has("mature_content") and .mature_content.allowed == true and .mature_content.review_required == true' "$CONTENT_POLICY" \
            >/dev/null || { echo "‚ùå Mature content policy not compliant"; exit 1; }
          echo "‚úÖ Mature content policy validated."

      - name: Ensure CI did not generate explicit runtime artifacts
        run: |
          if [ -d .bit/runtime ] && [ -n "$(ls -A .bit/runtime 2>/dev/null)" ]; then
            echo "‚ùå Explicit runtime artifacts must not be present in CI (.bit/runtime/*)"; exit 1;
          fi
          echo "‚úÖ No explicit runtime artifacts present."

      - name: Audit log
        run: |
          mkdir -p "$REPORTS_DIR"
          echo "$(date -u +%FT%TZ) macOS compliance passed for $GITHUB_SHA" >> "$REPORTS_DIR/compliance.log"

      - name: Upload masked reports
        uses: actions/upload-artifact@v4
        with:
          name: compliance-reports-macos
          path: |
            .bithubreports/compliance.log
            .bithubreports/disallowed_summary.txt
            .bithubreports/offending_files.txt
          if-no-files-found: warn
          retention-days: 7
